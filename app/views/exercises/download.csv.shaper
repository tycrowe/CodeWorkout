csv.headers :type, :exid, :points, :question, :correct_answer,
  :choice_1, :choice_2, :choice_3, :choice_4, :choice_5, :choice_6,
  :choice_7, :choice_8, :choice_9, :choice_10, :explanation,
  :programming_language, :tags,
  :stem, :name, :is_public, :user_id, :priority, :experience,
  :mcq_allow_multiple, :mcq_is_scrambled,
  :variation_group,
  :class_name, :method_name, :starter_code, :wrapper_code, :tests

csv.rows @exercises do |csv, exercise|
  csv.cell :type, exercise.base_exercise.type_name
  csv.cell :exid, exercise.id
  csv.cells :question, :is_public, :priority, :experience
  csv.cell :name, exercise.read_attribute(:name)
  csv.cell :user_id,
    exercise.user ? exercise.user.id : exercise.base_exercise.user.andand.id
  csv.cell :variation_group,
    exercise.base_exercise.variation_group.andand.name
  csv.cell :stem, exercise.andand.stem.andand.preamble
  if !exercise.feedback.blank?
    csv.cell :explanation, exercise.feedback
  end
  if exercise.tags.size > 0
    csv.cell :tags, exercise.tags.map {|t| t.tag_name}.join(', ')
  end
  csv.cell :programming_language, exercise.language
  if exercise.base_exercise.is_mcq?
    csv.cells :mcq_allow_multiple, :mcq_is_scrambled
    choice = 1
    exercise.choices.each do |choice|
      csv.cell ("choice_" + choice.to_s).to_sym, choice.answer
    end
  elsif exercise.base_exercise.is_coding? && exercise.coding_question
    csv.cell :class_name, exercise.coding_question.class_name
    csv.cell :method_name, exercise.coding_question.method_name
    csv.cell :starter_code, exercise.coding_question.starter_code
    csv.cell :wrapper_code, exercise.coding_question.wrapper_code
    csv.cell :tests, exercise.coding_question.test_script
  end
end
